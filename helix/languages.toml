use-grammars = { only = [
  "awk",
  "bash",
  "c",
  "cpp",
  "cmake",
  "css",
  "csv",
  "diff",
  "dockerfile",
  "elixir",
  "go",
  "godot-resource",
  "gomod",
  "gotmpl",
  "gowork",
  "html",
  "ini",
  "java",
  "javascript",
  "jinja",
  "json",
  "json5",
  "make",
  "markdown",
  "mermaid",
  "opencl",
  "pascal",
  "php-only",
  "properties",
  "protobuf",
  "python",
  "qml",
  "r",
  "regex",
  "robot",
  "ruby",
  "rust",
  "rust-format-args",
  "slint",
  "sql",
  "sshclientconfig",
  "strace",
  "toml",
  "tsx",
  "typescript",
  "vue",
  "xml",
  "yaml",
  "zig",
] }


# BASH
[language-server.bash-language-server]
command = "bash-language-server"
args = ["start"]


# C, CPP
[language-server.clangd]
command = "clangd"


# DOCKER
[language-server.docker-language-server]
command = "docker-language-server"
args = ["start", "--stdio"]


# HTML, CSS, MARKDOWN
[[language]]
name = "html"
formatter = { command = 'prettier', args = ["--parser", "html"] }
[[language]]
name = "css"
formatter = { command = 'prettier', args = ["--parser", "css"] }
[[language]]
name = "markdown"
formatter = { command = 'prettier', args = ["--parser", "markdown"] }


# GO
[[language]]
name = "go"
formatter = { command = "goimports" }

[language-server.gopls]
command = "gopls"

[language-server.gopls.config.hints]
assignVariableTypes = true
compositeLiteralFields = true
constantValues = true
functionTypeParameters = true
parameterNames = true
rangeVariableTypes = true

[language-server.golangci-lint-lsp]
command = "golangci-lint-langserver"

[language-server.golangci-lint-lsp.config]
command = [
  "golangci-lint",
  "run",
  "--output.json.path=stdout",
  "--show-stats=false",
  "--issues-exit-code=1",
]


# JAVASCRIPT, TYPESCRIPT
[[language]]
name = "javascript"
language-servers = [
  "typescript-language-server",
  "vscode-eslint-language-server",
]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }

[[language]]
name = "jsx"
language-servers = [
  "typescript-language-server",
  "vscode-eslint-language-server",
]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }

[[language]]
name = "typescript"
language-servers = [
  "typescript-language-server",
  "vscode-eslint-language-server",
]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }

[[language]]
name = "tsx"
language-servers = [
  "typescript-language-server",
  "vscode-eslint-language-server",
]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }

[language-server.typescript-language-server]
command = "typescript-language-server"
args = ["--stdio"]
config.hostInfo = "helix"

[language-server.typescript-language-server.config.typescript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = true
includeInlayFunctionParameterTypeHints = true
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = true
includeInlayPropertyDeclarationTypeHints = true
includeInlayVariableTypeHints = true

[language-server.typescript-language-server.config.javascript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = true
includeInlayFunctionParameterTypeHints = true
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = true
includeInlayPropertyDeclarationTypeHints = true
includeInlayVariableTypeHints = true

[language-server.svelteserver.config.configuration.typescript]
inlayHints.parameterTypes.enabled = true
inlayHints.variableTypes.enabled = true
inlayHints.propertyDeclarationTypes.enabled = true
inlayHints.functionLikeReturnTypes.enabled = true
inlayHints.enumMemberValues.enabled = true
inlayHints.parameterNames.enabled = "all"

[language-server.svelteserver.config.configuration.javascript]
inlayHints.parameterTypes.enabled = true
inlayHints.variableTypes.enabled = true
inlayHints.propertyDeclarationTypes.enabled = true
inlayHints.functionLikeReturnTypes.enabled = true
inlayHints.enumMemberValues.enabled = true
inlayHints.parameterNames.enabled = "all"


# JSON
[[language]]
name = "json"
formatter = { command = 'prettier', args = ["--parser", "json"] }


# PYTHON
[[language]]
name = "python"
language-servers = ["pyright", "ruff"]

[language-server.pyright.config.python.analysis]
typeCheckingMode = "basic"

[language-server.ruff]
command = "ruff"
args = ["server"]


# RUST
[language-server.rust-analyzer.config.check]
command = "clippy"


# SQL
[[language]]
name = "sql"
formatter = { command = "sqlformat", args = ["--reindent", "--indent_width", "2", "--keywords", "upper", "--identifiers", "lower", "-"] }


# TOML
[[language]]
name = "toml"
formatter = { command = "taplo", args = ["fmt", "-"] }


# VUE
[[language]]
name = "vue"
formatter = { command = "prettier", args = ["--parser", "vue"] }
language-servers = ["typescript-language-server"]

[[language-server.typescript-language-server.config.plugins]]
name = "@vue/typescript-plugin"
location = "/home/rafaelv-ubuntu/.local/share/mise/installs/node/25.0.0/lib/@vue/language-server/"
languages = ["vue"]


# YAML
[language-server.yaml-language-server.config.yaml]
format = { enable = true }
validation = true

[language-server.yaml-language-server.config.yaml.schemas]
"https://json.schemastore.org/github-workflow.json" = ".github/workflows/*.{yml,yaml}"
"https://raw.githubusercontent.com/ansible-community/schemas/main/f/ansible-tasks.json" = "roles/{tasks,handlers}/*.{yml,yaml}"
